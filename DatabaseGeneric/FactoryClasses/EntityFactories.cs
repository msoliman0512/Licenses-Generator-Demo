//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.7.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using Licenses_Generator_DBFirst.EntityClasses;
using Licenses_Generator_DBFirst.HelperClasses;
using Licenses_Generator_DBFirst.RelationClasses;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Licenses_Generator_DBFirst.FactoryClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END


	/// <summary>general base class for the generated factories</summary>
	[Serializable]
	public partial class EntityFactoryBase2<TEntity> : EntityFactoryCore2
		where TEntity : EntityBase2, IEntity2
	{
		private readonly Licenses_Generator_DBFirst.EntityType _typeOfEntity;
		private readonly bool _isInHierarchy;

		/// <summary>CTor</summary>
		/// <param name="entityName">Name of the entity.</param>
		/// <param name="typeOfEntity">The type of entity.</param>
		/// <param name="isInHierarchy">If true, the entity of this factory is in an inheritance hierarchy, false otherwise</param>
		public EntityFactoryBase2(string entityName, Licenses_Generator_DBFirst.EntityType typeOfEntity, bool isInHierarchy) : base(entityName)
		{
			_typeOfEntity = typeOfEntity;
			_isInHierarchy = isInHierarchy;
		}
		
		/// <inheritdoc/>
		public override IEntityFields2 CreateFields() { return ModelInfoProviderSingleton.GetInstance().GetEntityFields(this.ForEntityName); }
		
		/// <inheritdoc/>
		public override IEntity2 CreateEntityFromEntityTypeValue(int entityTypeValue) {	return GeneralEntityFactory.Create((Licenses_Generator_DBFirst.EntityType)entityTypeValue); }

		/// <inheritdoc/>
		public override IRelationCollection CreateHierarchyRelations(string objectAlias) { return ModelInfoProviderSingleton.GetInstance().GetHierarchyRelations(this.ForEntityName, objectAlias); }

		/// <inheritdoc/>
		public override IEntityFactory2 GetEntityFactory(object[] fieldValues, Dictionary<string, int> entityFieldStartIndexesPerEntity) 
		{
			return (IEntityFactory2)ModelInfoProviderSingleton.GetInstance().GetEntityFactory(this.ForEntityName, fieldValues, entityFieldStartIndexesPerEntity) ?? this;
		}
		
		/// <inheritdoc/>
		public override IPredicateExpression GetEntityTypeFilter(bool negate, string objectAlias) {	return ModelInfoProviderSingleton.GetInstance().GetEntityTypeFilter(this.ForEntityName, objectAlias, negate);	}
						
		/// <inheritdoc/>
		public override IEntityCollection2 CreateEntityCollection()	{ return new EntityCollection<TEntity>(this); }
		
		/// <inheritdoc/>
		public override IEntityFields2 CreateHierarchyFields() 
		{
			return _isInHierarchy ? new EntityFields2(ModelInfoProviderSingleton.GetInstance().GetHierarchyFields(this.ForEntityName), ModelInfoProviderSingleton.GetInstance(), null) : base.CreateHierarchyFields();
		}
		
		/// <inheritdoc/>
		protected override Type ForEntityType { get { return typeof(TEntity); } }
	}

	/// <summary>Factory to create new, empty ActionEntity objects.</summary>
	[Serializable]
	public partial class ActionEntityFactory : EntityFactoryBase2<ActionEntity> 
	{
		/// <summary>CTor</summary>
		public ActionEntityFactory() : base("ActionEntity", Licenses_Generator_DBFirst.EntityType.ActionEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new ActionEntity(fields); }
	}

	/// <summary>Factory to create new, empty AddressEntity objects.</summary>
	[Serializable]
	public partial class AddressEntityFactory : EntityFactoryBase2<AddressEntity> 
	{
		/// <summary>CTor</summary>
		public AddressEntityFactory() : base("AddressEntity", Licenses_Generator_DBFirst.EntityType.AddressEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new AddressEntity(fields); }
	}

	/// <summary>Factory to create new, empty CityEntity objects.</summary>
	[Serializable]
	public partial class CityEntityFactory : EntityFactoryBase2<CityEntity> 
	{
		/// <summary>CTor</summary>
		public CityEntityFactory() : base("CityEntity", Licenses_Generator_DBFirst.EntityType.CityEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new CityEntity(fields); }
	}

	/// <summary>Factory to create new, empty ClientEntity objects.</summary>
	[Serializable]
	public partial class ClientEntityFactory : EntityFactoryBase2<ClientEntity> 
	{
		/// <summary>CTor</summary>
		public ClientEntityFactory() : base("ClientEntity", Licenses_Generator_DBFirst.EntityType.ClientEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new ClientEntity(fields); }
	}

	/// <summary>Factory to create new, empty dboActionEntity objects.</summary>
	[Serializable]
	public partial class dboActionEntityFactory : EntityFactoryBase2<dboActionEntity> 
	{
		/// <summary>CTor</summary>
		public dboActionEntityFactory() : base("dboActionEntity", Licenses_Generator_DBFirst.EntityType.dboActionEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new dboActionEntity(fields); }
	}

	/// <summary>Factory to create new, empty dboAddressEntity objects.</summary>
	[Serializable]
	public partial class dboAddressEntityFactory : EntityFactoryBase2<dboAddressEntity> 
	{
		/// <summary>CTor</summary>
		public dboAddressEntityFactory() : base("dboAddressEntity", Licenses_Generator_DBFirst.EntityType.dboAddressEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new dboAddressEntity(fields); }
	}

	/// <summary>Factory to create new, empty dboCityEntity objects.</summary>
	[Serializable]
	public partial class dboCityEntityFactory : EntityFactoryBase2<dboCityEntity> 
	{
		/// <summary>CTor</summary>
		public dboCityEntityFactory() : base("dboCityEntity", Licenses_Generator_DBFirst.EntityType.dboCityEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new dboCityEntity(fields); }
	}

	/// <summary>Factory to create new, empty dboClientEntity objects.</summary>
	[Serializable]
	public partial class dboClientEntityFactory : EntityFactoryBase2<dboClientEntity> 
	{
		/// <summary>CTor</summary>
		public dboClientEntityFactory() : base("dboClientEntity", Licenses_Generator_DBFirst.EntityType.dboClientEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new dboClientEntity(fields); }
	}

	/// <summary>Factory to create new, empty dboDocumentEntity objects.</summary>
	[Serializable]
	public partial class dboDocumentEntityFactory : EntityFactoryBase2<dboDocumentEntity> 
	{
		/// <summary>CTor</summary>
		public dboDocumentEntityFactory() : base("dboDocumentEntity", Licenses_Generator_DBFirst.EntityType.dboDocumentEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new dboDocumentEntity(fields); }
	}

	/// <summary>Factory to create new, empty dboGovernorateEntity objects.</summary>
	[Serializable]
	public partial class dboGovernorateEntityFactory : EntityFactoryBase2<dboGovernorateEntity> 
	{
		/// <summary>CTor</summary>
		public dboGovernorateEntityFactory() : base("dboGovernorateEntity", Licenses_Generator_DBFirst.EntityType.dboGovernorateEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new dboGovernorateEntity(fields); }
	}

	/// <summary>Factory to create new, empty dboLicenseEntity objects.</summary>
	[Serializable]
	public partial class dboLicenseEntityFactory : EntityFactoryBase2<dboLicenseEntity> 
	{
		/// <summary>CTor</summary>
		public dboLicenseEntityFactory() : base("dboLicenseEntity", Licenses_Generator_DBFirst.EntityType.dboLicenseEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new dboLicenseEntity(fields); }
	}

	/// <summary>Factory to create new, empty dboLicenseRequestEntity objects.</summary>
	[Serializable]
	public partial class dboLicenseRequestEntityFactory : EntityFactoryBase2<dboLicenseRequestEntity> 
	{
		/// <summary>CTor</summary>
		public dboLicenseRequestEntityFactory() : base("dboLicenseRequestEntity", Licenses_Generator_DBFirst.EntityType.dboLicenseRequestEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new dboLicenseRequestEntity(fields); }
	}

	/// <summary>Factory to create new, empty dboLicenseTypeEntity objects.</summary>
	[Serializable]
	public partial class dboLicenseTypeEntityFactory : EntityFactoryBase2<dboLicenseTypeEntity> 
	{
		/// <summary>CTor</summary>
		public dboLicenseTypeEntityFactory() : base("dboLicenseTypeEntity", Licenses_Generator_DBFirst.EntityType.dboLicenseTypeEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new dboLicenseTypeEntity(fields); }
	}

	/// <summary>Factory to create new, empty dboUserEntity objects.</summary>
	[Serializable]
	public partial class dboUserEntityFactory : EntityFactoryBase2<dboUserEntity> 
	{
		/// <summary>CTor</summary>
		public dboUserEntityFactory() : base("dboUserEntity", Licenses_Generator_DBFirst.EntityType.dboUserEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new dboUserEntity(fields); }
	}

	/// <summary>Factory to create new, empty dboVersionInfoEntity objects.</summary>
	[Serializable]
	public partial class dboVersionInfoEntityFactory : EntityFactoryBase2<dboVersionInfoEntity> 
	{
		/// <summary>CTor</summary>
		public dboVersionInfoEntityFactory() : base("dboVersionInfoEntity", Licenses_Generator_DBFirst.EntityType.dboVersionInfoEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new dboVersionInfoEntity(fields); }
	}

	/// <summary>Factory to create new, empty DocumentEntity objects.</summary>
	[Serializable]
	public partial class DocumentEntityFactory : EntityFactoryBase2<DocumentEntity> 
	{
		/// <summary>CTor</summary>
		public DocumentEntityFactory() : base("DocumentEntity", Licenses_Generator_DBFirst.EntityType.DocumentEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new DocumentEntity(fields); }
	}

	/// <summary>Factory to create new, empty GovernorateEntity objects.</summary>
	[Serializable]
	public partial class GovernorateEntityFactory : EntityFactoryBase2<GovernorateEntity> 
	{
		/// <summary>CTor</summary>
		public GovernorateEntityFactory() : base("GovernorateEntity", Licenses_Generator_DBFirst.EntityType.GovernorateEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new GovernorateEntity(fields); }
	}

	/// <summary>Factory to create new, empty LicenseEntity objects.</summary>
	[Serializable]
	public partial class LicenseEntityFactory : EntityFactoryBase2<LicenseEntity> 
	{
		/// <summary>CTor</summary>
		public LicenseEntityFactory() : base("LicenseEntity", Licenses_Generator_DBFirst.EntityType.LicenseEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new LicenseEntity(fields); }
	}

	/// <summary>Factory to create new, empty LicenseRequestEntity objects.</summary>
	[Serializable]
	public partial class LicenseRequestEntityFactory : EntityFactoryBase2<LicenseRequestEntity> 
	{
		/// <summary>CTor</summary>
		public LicenseRequestEntityFactory() : base("LicenseRequestEntity", Licenses_Generator_DBFirst.EntityType.LicenseRequestEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new LicenseRequestEntity(fields); }
	}

	/// <summary>Factory to create new, empty LicenseTypeEntity objects.</summary>
	[Serializable]
	public partial class LicenseTypeEntityFactory : EntityFactoryBase2<LicenseTypeEntity> 
	{
		/// <summary>CTor</summary>
		public LicenseTypeEntityFactory() : base("LicenseTypeEntity", Licenses_Generator_DBFirst.EntityType.LicenseTypeEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new LicenseTypeEntity(fields); }
	}

	/// <summary>Factory to create new, empty UserEntity objects.</summary>
	[Serializable]
	public partial class UserEntityFactory : EntityFactoryBase2<UserEntity> 
	{
		/// <summary>CTor</summary>
		public UserEntityFactory() : base("UserEntity", Licenses_Generator_DBFirst.EntityType.UserEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new UserEntity(fields); }
	}

	/// <summary>Factory to create new, empty VersionInfoEntity objects.</summary>
	[Serializable]
	public partial class VersionInfoEntityFactory : EntityFactoryBase2<VersionInfoEntity> 
	{
		/// <summary>CTor</summary>
		public VersionInfoEntityFactory() : base("VersionInfoEntity", Licenses_Generator_DBFirst.EntityType.VersionInfoEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new VersionInfoEntity(fields); }
	}

	/// <summary>Factory to create new, empty Entity objects based on the entity type specified. Uses  entity specific factory objects</summary>
	[Serializable]
	public partial class GeneralEntityFactory
	{
		/// <summary>Creates a new, empty Entity object of the type specified</summary>
		/// <param name="entityTypeToCreate">The entity type to create.</param>
		/// <returns>A new, empty Entity object.</returns>
		public static IEntity2 Create(Licenses_Generator_DBFirst.EntityType entityTypeToCreate)
		{
			var factoryToUse = EntityFactoryFactory.GetFactory(entityTypeToCreate);
			IEntity2 toReturn = null;
			if(factoryToUse != null)
			{
				toReturn = factoryToUse.Create();
			}
			return toReturn;
		}		
	}
		
	/// <summary>Class which is used to obtain the entity factory based on the .NET type of the entity. </summary>
	[Serializable]
	public static class EntityFactoryFactory
	{
		private static Dictionary<Type, IEntityFactory2> _factoryPerType = new Dictionary<Type, IEntityFactory2>();

		/// <summary>Initializes the <see cref="EntityFactoryFactory"/> class.</summary>
		static EntityFactoryFactory()
		{
			foreach(int entityTypeValue in Enum.GetValues(typeof(Licenses_Generator_DBFirst.EntityType)))
			{
				var factory = GetFactory((Licenses_Generator_DBFirst.EntityType)entityTypeValue);
				_factoryPerType.Add(factory.ForEntityType ?? factory.Create().GetType(), factory);
			}
		}

		/// <summary>Gets the factory of the entity with the .NET type specified</summary>
		/// <param name="typeOfEntity">The type of entity.</param>
		/// <returns>factory to use or null if not found</returns>
		public static IEntityFactory2 GetFactory(Type typeOfEntity) { return _factoryPerType.GetValue(typeOfEntity); }

		/// <summary>Gets the factory of the entity with the Licenses_Generator_DBFirst.EntityType specified</summary>
		/// <param name="typeOfEntity">The type of entity.</param>
		/// <returns>factory to use or null if not found</returns>
		public static IEntityFactory2 GetFactory(Licenses_Generator_DBFirst.EntityType typeOfEntity)
		{
			switch(typeOfEntity)
			{
				case Licenses_Generator_DBFirst.EntityType.ActionEntity:
					return new ActionEntityFactory();
				case Licenses_Generator_DBFirst.EntityType.AddressEntity:
					return new AddressEntityFactory();
				case Licenses_Generator_DBFirst.EntityType.CityEntity:
					return new CityEntityFactory();
				case Licenses_Generator_DBFirst.EntityType.ClientEntity:
					return new ClientEntityFactory();
				case Licenses_Generator_DBFirst.EntityType.dboActionEntity:
					return new dboActionEntityFactory();
				case Licenses_Generator_DBFirst.EntityType.dboAddressEntity:
					return new dboAddressEntityFactory();
				case Licenses_Generator_DBFirst.EntityType.dboCityEntity:
					return new dboCityEntityFactory();
				case Licenses_Generator_DBFirst.EntityType.dboClientEntity:
					return new dboClientEntityFactory();
				case Licenses_Generator_DBFirst.EntityType.dboDocumentEntity:
					return new dboDocumentEntityFactory();
				case Licenses_Generator_DBFirst.EntityType.dboGovernorateEntity:
					return new dboGovernorateEntityFactory();
				case Licenses_Generator_DBFirst.EntityType.dboLicenseEntity:
					return new dboLicenseEntityFactory();
				case Licenses_Generator_DBFirst.EntityType.dboLicenseRequestEntity:
					return new dboLicenseRequestEntityFactory();
				case Licenses_Generator_DBFirst.EntityType.dboLicenseTypeEntity:
					return new dboLicenseTypeEntityFactory();
				case Licenses_Generator_DBFirst.EntityType.dboUserEntity:
					return new dboUserEntityFactory();
				case Licenses_Generator_DBFirst.EntityType.dboVersionInfoEntity:
					return new dboVersionInfoEntityFactory();
				case Licenses_Generator_DBFirst.EntityType.DocumentEntity:
					return new DocumentEntityFactory();
				case Licenses_Generator_DBFirst.EntityType.GovernorateEntity:
					return new GovernorateEntityFactory();
				case Licenses_Generator_DBFirst.EntityType.LicenseEntity:
					return new LicenseEntityFactory();
				case Licenses_Generator_DBFirst.EntityType.LicenseRequestEntity:
					return new LicenseRequestEntityFactory();
				case Licenses_Generator_DBFirst.EntityType.LicenseTypeEntity:
					return new LicenseTypeEntityFactory();
				case Licenses_Generator_DBFirst.EntityType.UserEntity:
					return new UserEntityFactory();
				case Licenses_Generator_DBFirst.EntityType.VersionInfoEntity:
					return new VersionInfoEntityFactory();
				default:
					return null;
			}
		}
	}
		
	/// <summary>Element creator for creating project elements from somewhere else, like inside Linq providers.</summary>
	public class ElementCreator : ElementCreatorBase, IElementCreator2
	{
		/// <summary>Gets the factory of the Entity type with the Licenses_Generator_DBFirst.EntityType value passed in</summary>
		/// <param name="entityTypeValue">The entity type value.</param>
		/// <returns>the entity factory of the entity type or null if not found</returns>
		public IEntityFactory2 GetFactory(int entityTypeValue) { return (IEntityFactory2)this.GetFactoryImpl(entityTypeValue); }
		
		/// <summary>Gets the factory of the Entity type with the .NET type passed in</summary>
		/// <param name="typeOfEntity">The type of entity.</param>
		/// <returns>the entity factory of the entity type or null if not found</returns>
		public IEntityFactory2 GetFactory(Type typeOfEntity) { return (IEntityFactory2)this.GetFactoryImpl(typeOfEntity); }

		/// <summary>Creates a new resultset fields object with the number of field slots reserved as specified</summary>
		/// <param name="numberOfFields">The number of fields.</param>
		/// <returns>ready to use resultsetfields object</returns>
		public IEntityFields2 CreateResultsetFields(int numberOfFields) { return new ResultsetFields(numberOfFields); }
		
		/// <inheritdoc/>
		public override IInheritanceInfoProvider ObtainInheritanceInfoProviderInstance() { return ModelInfoProviderSingleton.GetInstance(); }

		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(DerivedTableDefinition leftOperand) { return new DynamicRelation(leftOperand); }

		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(DerivedTableDefinition leftOperand, JoinHint joinType, DerivedTableDefinition rightOperand, IPredicate onClause)
		{
			return new DynamicRelation(leftOperand, joinType, rightOperand, onClause);
		}

		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(IEntityFieldCore leftOperand, JoinHint joinType, DerivedTableDefinition rightOperand, string aliasLeftOperand, IPredicate onClause)
		{
			return new DynamicRelation(leftOperand, joinType, rightOperand, aliasLeftOperand, onClause);
		}

		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(DerivedTableDefinition leftOperand, JoinHint joinType, string rightOperandEntityName, string aliasRightOperand, IPredicate onClause)
		{
			return new DynamicRelation(leftOperand, joinType, (Licenses_Generator_DBFirst.EntityType)Enum.Parse(typeof(Licenses_Generator_DBFirst.EntityType), rightOperandEntityName, false), aliasRightOperand, onClause);
		}

		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(string leftOperandEntityName, JoinHint joinType, string rightOperandEntityName, string aliasLeftOperand, string aliasRightOperand, IPredicate onClause)
		{
			return new DynamicRelation((Licenses_Generator_DBFirst.EntityType)Enum.Parse(typeof(Licenses_Generator_DBFirst.EntityType), leftOperandEntityName, false), joinType, (Licenses_Generator_DBFirst.EntityType)Enum.Parse(typeof(Licenses_Generator_DBFirst.EntityType), rightOperandEntityName, false), aliasLeftOperand, aliasRightOperand, onClause);
		}
		
		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(IEntityFieldCore leftOperand, JoinHint joinType, string rightOperandEntityName, string aliasLeftOperand, string aliasRightOperand, IPredicate onClause)
		{
			return new DynamicRelation(leftOperand, joinType, (Licenses_Generator_DBFirst.EntityType)Enum.Parse(typeof(Licenses_Generator_DBFirst.EntityType), rightOperandEntityName, false), aliasLeftOperand, aliasRightOperand, onClause);
		}
		
		/// <inheritdoc/>
		protected override IEntityFactoryCore GetFactoryImpl(int entityTypeValue) { return EntityFactoryFactory.GetFactory((Licenses_Generator_DBFirst.EntityType)entityTypeValue); }

		/// <inheritdoc/>
		protected override IEntityFactoryCore GetFactoryImpl(Type typeOfEntity) { return EntityFactoryFactory.GetFactory(typeOfEntity);	}

	}
}
