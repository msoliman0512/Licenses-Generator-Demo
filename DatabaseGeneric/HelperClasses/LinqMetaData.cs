//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.7.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Linq;
using System.Collections.Generic;
using SD.LLBLGen.Pro.LinqSupportClasses;
using SD.LLBLGen.Pro.ORMSupportClasses;
using Licenses_Generator_DBFirst.EntityClasses;
using Licenses_Generator_DBFirst.FactoryClasses;

namespace Licenses_Generator_DBFirst.Linq
{
	/// <summary>Meta-data class for the construction of Linq queries which are to be executed using LLBLGen Pro code.</summary>
	public partial class LinqMetaData: ILinqMetaData
	{
		/// <summary>CTor. Using this ctor will leave the IDataAccessAdapter object to use empty. To be able to execute the query, an IDataAccessAdapter instance
		/// is required, and has to be set on the LLBLGenProProvider2 object in the query to execute. </summary>
		public LinqMetaData() : this(null, null) { }
		
		/// <summary>CTor which accepts an IDataAccessAdapter implementing object, which will be used to execute queries created with this metadata class.</summary>
		/// <param name="adapterToUse">the IDataAccessAdapter to use in queries created with this meta data</param>
		/// <remarks> Be aware that the IDataAccessAdapter object set via this property is kept alive by the LLBLGenProQuery objects created with this meta data till they go out of scope.</remarks>
		public LinqMetaData(IDataAccessAdapter adapterToUse) : this (adapterToUse, null) { }

		/// <summary>CTor which accepts an IDataAccessAdapter implementing object, which will be used to execute queries created with this metadata class.</summary>
		/// <param name="adapterToUse">the IDataAccessAdapter to use in queries created with this meta data</param>
		/// <param name="customFunctionMappings">The custom function mappings to use. These take higher precedence than the ones in the DQE to use.</param>
		/// <remarks> Be aware that the IDataAccessAdapter object set via this property is kept alive by the LLBLGenProQuery objects created with this meta data till they go out of scope.</remarks>
		public LinqMetaData(IDataAccessAdapter adapterToUse, FunctionMappingStore customFunctionMappings)
		{
			this.AdapterToUse = adapterToUse;
			this.CustomFunctionMappings = customFunctionMappings;
		}
	
		/// <summary>returns the datasource to use in a Linq query for the entity type specified</summary>
		/// <param name="typeOfEntity">the type of the entity to get the datasource for</param>
		/// <returns>the requested datasource</returns>
		public IDataSource GetQueryableForEntity(int typeOfEntity)
		{
			switch((Licenses_Generator_DBFirst.EntityType)typeOfEntity)
			{
				case Licenses_Generator_DBFirst.EntityType.ActionEntity:
					return this.Action;
				case Licenses_Generator_DBFirst.EntityType.AddressEntity:
					return this.Address;
				case Licenses_Generator_DBFirst.EntityType.CityEntity:
					return this.City;
				case Licenses_Generator_DBFirst.EntityType.ClientEntity:
					return this.Client;
				case Licenses_Generator_DBFirst.EntityType.dboActionEntity:
					return this.dboAction;
				case Licenses_Generator_DBFirst.EntityType.dboAddressEntity:
					return this.dboAddress;
				case Licenses_Generator_DBFirst.EntityType.dboCityEntity:
					return this.dboCity;
				case Licenses_Generator_DBFirst.EntityType.dboClientEntity:
					return this.dboClient;
				case Licenses_Generator_DBFirst.EntityType.dboDocumentEntity:
					return this.dboDocument;
				case Licenses_Generator_DBFirst.EntityType.dboGovernorateEntity:
					return this.dboGovernorate;
				case Licenses_Generator_DBFirst.EntityType.dboLicenseEntity:
					return this.dboLicense;
				case Licenses_Generator_DBFirst.EntityType.dboLicenseRequestEntity:
					return this.dboLicenseRequest;
				case Licenses_Generator_DBFirst.EntityType.dboLicenseTypeEntity:
					return this.dboLicenseType;
				case Licenses_Generator_DBFirst.EntityType.dboUserEntity:
					return this.dboUser;
				case Licenses_Generator_DBFirst.EntityType.dboVersionInfoEntity:
					return this.dboVersionInfo;
				case Licenses_Generator_DBFirst.EntityType.DocumentEntity:
					return this.Document;
				case Licenses_Generator_DBFirst.EntityType.GovernorateEntity:
					return this.Governorate;
				case Licenses_Generator_DBFirst.EntityType.LicenseEntity:
					return this.License;
				case Licenses_Generator_DBFirst.EntityType.LicenseRequestEntity:
					return this.LicenseRequest;
				case Licenses_Generator_DBFirst.EntityType.LicenseTypeEntity:
					return this.LicenseType;
				case Licenses_Generator_DBFirst.EntityType.UserEntity:
					return this.User;
				case Licenses_Generator_DBFirst.EntityType.VersionInfoEntity:
					return this.VersionInfo;
				default:
					return null;
			}
		}

		/// <summary>returns the datasource to use in a Linq query for the entity type specified</summary>
		/// <typeparam name="TEntity">the type of the entity to get the datasource for</typeparam>
		/// <returns>the requested datasource</returns>
		public DataSource2<TEntity> GetQueryableForEntity<TEntity>()
				where TEntity : class
		{
			return new DataSource2<TEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse);
		}

		/// <summary>returns the datasource to use in a Linq query when targeting ActionEntity instances in the database.</summary>
		public DataSource2<ActionEntity> Action {	get { return new DataSource2<ActionEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting AddressEntity instances in the database.</summary>
		public DataSource2<AddressEntity> Address {	get { return new DataSource2<AddressEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting CityEntity instances in the database.</summary>
		public DataSource2<CityEntity> City {	get { return new DataSource2<CityEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting ClientEntity instances in the database.</summary>
		public DataSource2<ClientEntity> Client {	get { return new DataSource2<ClientEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting dboActionEntity instances in the database.</summary>
		public DataSource2<dboActionEntity> dboAction {	get { return new DataSource2<dboActionEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting dboAddressEntity instances in the database.</summary>
		public DataSource2<dboAddressEntity> dboAddress {	get { return new DataSource2<dboAddressEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting dboCityEntity instances in the database.</summary>
		public DataSource2<dboCityEntity> dboCity {	get { return new DataSource2<dboCityEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting dboClientEntity instances in the database.</summary>
		public DataSource2<dboClientEntity> dboClient {	get { return new DataSource2<dboClientEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting dboDocumentEntity instances in the database.</summary>
		public DataSource2<dboDocumentEntity> dboDocument {	get { return new DataSource2<dboDocumentEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting dboGovernorateEntity instances in the database.</summary>
		public DataSource2<dboGovernorateEntity> dboGovernorate {	get { return new DataSource2<dboGovernorateEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting dboLicenseEntity instances in the database.</summary>
		public DataSource2<dboLicenseEntity> dboLicense {	get { return new DataSource2<dboLicenseEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting dboLicenseRequestEntity instances in the database.</summary>
		public DataSource2<dboLicenseRequestEntity> dboLicenseRequest {	get { return new DataSource2<dboLicenseRequestEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting dboLicenseTypeEntity instances in the database.</summary>
		public DataSource2<dboLicenseTypeEntity> dboLicenseType {	get { return new DataSource2<dboLicenseTypeEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting dboUserEntity instances in the database.</summary>
		public DataSource2<dboUserEntity> dboUser {	get { return new DataSource2<dboUserEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting dboVersionInfoEntity instances in the database.</summary>
		public DataSource2<dboVersionInfoEntity> dboVersionInfo {	get { return new DataSource2<dboVersionInfoEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting DocumentEntity instances in the database.</summary>
		public DataSource2<DocumentEntity> Document {	get { return new DataSource2<DocumentEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting GovernorateEntity instances in the database.</summary>
		public DataSource2<GovernorateEntity> Governorate {	get { return new DataSource2<GovernorateEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting LicenseEntity instances in the database.</summary>
		public DataSource2<LicenseEntity> License {	get { return new DataSource2<LicenseEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting LicenseRequestEntity instances in the database.</summary>
		public DataSource2<LicenseRequestEntity> LicenseRequest {	get { return new DataSource2<LicenseRequestEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting LicenseTypeEntity instances in the database.</summary>
		public DataSource2<LicenseTypeEntity> LicenseType {	get { return new DataSource2<LicenseTypeEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting UserEntity instances in the database.</summary>
		public DataSource2<UserEntity> User {	get { return new DataSource2<UserEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting VersionInfoEntity instances in the database.</summary>
		public DataSource2<VersionInfoEntity> VersionInfo {	get { return new DataSource2<VersionInfoEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		


		/// <summary> Gets / sets the IDataAccessAdapter to use for the queries created with this meta data object.</summary>
		/// <remarks> Be aware that the IDataAccessAdapter object set via this property is kept alive by the LLBLGenProQuery objects created with this meta data
		/// till they go out of scope.</remarks>
		public IDataAccessAdapter AdapterToUse { get; set; }
		
		/// <summary>Gets or sets the custom function mappings to use. These take higher precedence than the ones in the DQE to use</summary>
		public FunctionMappingStore CustomFunctionMappings { get; set; }
		
		/// <summary>Gets or sets the Context instance to use for entity fetches.</summary>
		public Context ContextToUse { get; set; }
	}
}