//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.7.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Licenses_Generator_DBFirst.HelperClasses;
using Licenses_Generator_DBFirst.FactoryClasses;
using Licenses_Generator_DBFirst.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Licenses_Generator_DBFirst.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'City'.<br/><br/></summary>
	[Serializable]
	public partial class CityEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private GovernorateEntity _governorate;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static CityEntityStaticMetaData _staticMetaData = new CityEntityStaticMetaData();
		private static CityRelations _relationsFactory = new CityRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Governorate</summary>
			public static readonly string Governorate = "Governorate";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class CityEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public CityEntityStaticMetaData()
			{
				SetEntityCoreInfo("CityEntity", InheritanceHierarchyType.None, false, (int)Licenses_Generator_DBFirst.EntityType.CityEntity, typeof(CityEntity), typeof(CityEntityFactory), false);
				AddNavigatorMetaData<CityEntity, GovernorateEntity>("Governorate", "Cities", (a, b) => a._governorate = b, a => a._governorate, (a, b) => a.Governorate = b, Licenses_Generator_DBFirst.RelationClasses.StaticCityRelations.GovernorateEntityUsingGovernorateIdStatic, ()=>new CityRelations().GovernorateEntityUsingGovernorateId, null, new int[] { (int)CityFieldIndex.GovernorateId }, null, true, (int)Licenses_Generator_DBFirst.EntityType.GovernorateEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static CityEntity()
		{
		}

		/// <summary> CTor</summary>
		public CityEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public CityEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this CityEntity</param>
		public CityEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for City which data should be fetched into this City object</param>
		public CityEntity(System.Int32 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for City which data should be fetched into this City object</param>
		/// <param name="validator">The custom validator object for this CityEntity</param>
		public CityEntity(System.Int32 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected CityEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Governorate' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoGovernorate() { return CreateRelationInfoForNavigator("Governorate"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this CityEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static CityRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Governorate' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathGovernorate { get { return _staticMetaData.GetPrefetchPathElement("Governorate", CommonEntityBase.CreateEntityCollection<GovernorateEntity>()); } }

		/// <summary>The GovernorateId property of the Entity City<br/><br/></summary>
		/// <remarks>Mapped on  table field: "City"."GovernorateId".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 GovernorateId
		{
			get { return (System.Int32)GetValue((int)CityFieldIndex.GovernorateId, true); }
			set	{ SetValue((int)CityFieldIndex.GovernorateId, value); }
		}

		/// <summary>The Id property of the Entity City<br/><br/></summary>
		/// <remarks>Mapped on  table field: "City"."id".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 Id
		{
			get { return (System.Int32)GetValue((int)CityFieldIndex.Id, true); }
			set { SetValue((int)CityFieldIndex.Id, value); }		}

		/// <summary>The Name property of the Entity City<br/><br/></summary>
		/// <remarks>Mapped on  table field: "City"."name".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 255.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Name
		{
			get { return (System.String)GetValue((int)CityFieldIndex.Name, true); }
			set	{ SetValue((int)CityFieldIndex.Name, value); }
		}

		/// <summary>Gets / sets related entity of type 'GovernorateEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual GovernorateEntity Governorate
		{
			get { return _governorate; }
			set { SetSingleRelatedEntityNavigator(value, "Governorate"); }
		}
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace Licenses_Generator_DBFirst
{
	public enum CityFieldIndex
	{
		///<summary>GovernorateId. </summary>
		GovernorateId,
		///<summary>Id. </summary>
		Id,
		///<summary>Name. </summary>
		Name,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Licenses_Generator_DBFirst.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: City. </summary>
	public partial class CityRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between CityEntity and GovernorateEntity over the m:1 relation they have, using the relation between the fields: City.GovernorateId - Governorate.Id</summary>
		public virtual IEntityRelation GovernorateEntityUsingGovernorateId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Governorate", false, new[] { GovernorateFields.Id, CityFields.GovernorateId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticCityRelations
	{
		internal static readonly IEntityRelation GovernorateEntityUsingGovernorateIdStatic = new CityRelations().GovernorateEntityUsingGovernorateId;

		/// <summary>CTor</summary>
		static StaticCityRelations() { }
	}
}
