//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.7.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Licenses_Generator_DBFirst.HelperClasses;
using Licenses_Generator_DBFirst.FactoryClasses;
using Licenses_Generator_DBFirst.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Licenses_Generator_DBFirst.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'LicenseRequest'.<br/><br/></summary>
	[Serializable]
	public partial class LicenseRequestEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private EntityCollection<ActionEntity> _actions;
		private EntityCollection<DocumentEntity> _documents;
		private EntityCollection<LicenseEntity> _licenses;
		private ClientEntity _client;
		private LicenseTypeEntity _licenseType;
		private UserEntity _user;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static LicenseRequestEntityStaticMetaData _staticMetaData = new LicenseRequestEntityStaticMetaData();
		private static LicenseRequestRelations _relationsFactory = new LicenseRequestRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Client</summary>
			public static readonly string Client = "Client";
			/// <summary>Member name LicenseType</summary>
			public static readonly string LicenseType = "LicenseType";
			/// <summary>Member name User</summary>
			public static readonly string User = "User";
			/// <summary>Member name Actions</summary>
			public static readonly string Actions = "Actions";
			/// <summary>Member name Documents</summary>
			public static readonly string Documents = "Documents";
			/// <summary>Member name Licenses</summary>
			public static readonly string Licenses = "Licenses";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class LicenseRequestEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public LicenseRequestEntityStaticMetaData()
			{
				SetEntityCoreInfo("LicenseRequestEntity", InheritanceHierarchyType.None, false, (int)Licenses_Generator_DBFirst.EntityType.LicenseRequestEntity, typeof(LicenseRequestEntity), typeof(LicenseRequestEntityFactory), false);
				AddNavigatorMetaData<LicenseRequestEntity, EntityCollection<ActionEntity>>("Actions", a => a._actions, (a, b) => a._actions = b, a => a.Actions, () => new LicenseRequestRelations().ActionEntityUsingRequestId, typeof(ActionEntity), (int)Licenses_Generator_DBFirst.EntityType.ActionEntity);
				AddNavigatorMetaData<LicenseRequestEntity, EntityCollection<DocumentEntity>>("Documents", a => a._documents, (a, b) => a._documents = b, a => a.Documents, () => new LicenseRequestRelations().DocumentEntityUsingRequestId, typeof(DocumentEntity), (int)Licenses_Generator_DBFirst.EntityType.DocumentEntity);
				AddNavigatorMetaData<LicenseRequestEntity, EntityCollection<LicenseEntity>>("Licenses", a => a._licenses, (a, b) => a._licenses = b, a => a.Licenses, () => new LicenseRequestRelations().LicenseEntityUsingRequestId, typeof(LicenseEntity), (int)Licenses_Generator_DBFirst.EntityType.LicenseEntity);
				AddNavigatorMetaData<LicenseRequestEntity, ClientEntity>("Client", "LicenseRequests", (a, b) => a._client = b, a => a._client, (a, b) => a.Client = b, Licenses_Generator_DBFirst.RelationClasses.StaticLicenseRequestRelations.ClientEntityUsingClientIdStatic, ()=>new LicenseRequestRelations().ClientEntityUsingClientId, null, new int[] { (int)LicenseRequestFieldIndex.ClientId }, null, true, (int)Licenses_Generator_DBFirst.EntityType.ClientEntity);
				AddNavigatorMetaData<LicenseRequestEntity, LicenseTypeEntity>("LicenseType", "LicenseRequests", (a, b) => a._licenseType = b, a => a._licenseType, (a, b) => a.LicenseType = b, Licenses_Generator_DBFirst.RelationClasses.StaticLicenseRequestRelations.LicenseTypeEntityUsingTypeIdStatic, ()=>new LicenseRequestRelations().LicenseTypeEntityUsingTypeId, null, new int[] { (int)LicenseRequestFieldIndex.TypeId }, null, true, (int)Licenses_Generator_DBFirst.EntityType.LicenseTypeEntity);
				AddNavigatorMetaData<LicenseRequestEntity, UserEntity>("User", "LicenseRequests", (a, b) => a._user = b, a => a._user, (a, b) => a.User = b, Licenses_Generator_DBFirst.RelationClasses.StaticLicenseRequestRelations.UserEntityUsingUserIdStatic, ()=>new LicenseRequestRelations().UserEntityUsingUserId, null, new int[] { (int)LicenseRequestFieldIndex.UserId }, null, true, (int)Licenses_Generator_DBFirst.EntityType.UserEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static LicenseRequestEntity()
		{
		}

		/// <summary> CTor</summary>
		public LicenseRequestEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public LicenseRequestEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this LicenseRequestEntity</param>
		public LicenseRequestEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for LicenseRequest which data should be fetched into this LicenseRequest object</param>
		public LicenseRequestEntity(System.Int32 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for LicenseRequest which data should be fetched into this LicenseRequest object</param>
		/// <param name="validator">The custom validator object for this LicenseRequestEntity</param>
		public LicenseRequestEntity(System.Int32 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected LicenseRequestEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Action' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoActions() { return CreateRelationInfoForNavigator("Actions"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Document' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoDocuments() { return CreateRelationInfoForNavigator("Documents"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'License' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLicenses() { return CreateRelationInfoForNavigator("Licenses"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Client' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoClient() { return CreateRelationInfoForNavigator("Client"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'LicenseType' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLicenseType() { return CreateRelationInfoForNavigator("LicenseType"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'User' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUser() { return CreateRelationInfoForNavigator("User"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this LicenseRequestEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static LicenseRequestRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Action' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathActions { get { return _staticMetaData.GetPrefetchPathElement("Actions", CommonEntityBase.CreateEntityCollection<ActionEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Document' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathDocuments { get { return _staticMetaData.GetPrefetchPathElement("Documents", CommonEntityBase.CreateEntityCollection<DocumentEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'License' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLicenses { get { return _staticMetaData.GetPrefetchPathElement("Licenses", CommonEntityBase.CreateEntityCollection<LicenseEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Client' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathClient { get { return _staticMetaData.GetPrefetchPathElement("Client", CommonEntityBase.CreateEntityCollection<ClientEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'LicenseType' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLicenseType { get { return _staticMetaData.GetPrefetchPathElement("LicenseType", CommonEntityBase.CreateEntityCollection<LicenseTypeEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'User' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUser { get { return _staticMetaData.GetPrefetchPathElement("User", CommonEntityBase.CreateEntityCollection<UserEntity>()); } }

		/// <summary>The ClientId property of the Entity LicenseRequest<br/><br/></summary>
		/// <remarks>Mapped on  table field: "License_Request"."ClientId".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 ClientId
		{
			get { return (System.Int32)GetValue((int)LicenseRequestFieldIndex.ClientId, true); }
			set	{ SetValue((int)LicenseRequestFieldIndex.ClientId, value); }
		}

		/// <summary>The Id property of the Entity LicenseRequest<br/><br/></summary>
		/// <remarks>Mapped on  table field: "License_Request"."id".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 Id
		{
			get { return (System.Int32)GetValue((int)LicenseRequestFieldIndex.Id, true); }
			set { SetValue((int)LicenseRequestFieldIndex.Id, value); }		}

		/// <summary>The IssuedTime property of the Entity LicenseRequest<br/><br/></summary>
		/// <remarks>Mapped on  table field: "License_Request"."issued-time".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime IssuedTime
		{
			get { return (System.DateTime)GetValue((int)LicenseRequestFieldIndex.IssuedTime, true); }
			set	{ SetValue((int)LicenseRequestFieldIndex.IssuedTime, value); }
		}

		/// <summary>The Status property of the Entity LicenseRequest<br/><br/></summary>
		/// <remarks>Mapped on  table field: "License_Request"."status".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 255.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Status
		{
			get { return (System.String)GetValue((int)LicenseRequestFieldIndex.Status, true); }
			set	{ SetValue((int)LicenseRequestFieldIndex.Status, value); }
		}

		/// <summary>The TypeId property of the Entity LicenseRequest<br/><br/></summary>
		/// <remarks>Mapped on  table field: "License_Request"."TypeId".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 TypeId
		{
			get { return (System.Int32)GetValue((int)LicenseRequestFieldIndex.TypeId, true); }
			set	{ SetValue((int)LicenseRequestFieldIndex.TypeId, value); }
		}

		/// <summary>The UserId property of the Entity LicenseRequest<br/><br/></summary>
		/// <remarks>Mapped on  table field: "License_Request"."UserId".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 UserId
		{
			get { return (System.Int32)GetValue((int)LicenseRequestFieldIndex.UserId, true); }
			set	{ SetValue((int)LicenseRequestFieldIndex.UserId, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'ActionEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ActionEntity))]
		public virtual EntityCollection<ActionEntity> Actions { get { return GetOrCreateEntityCollection<ActionEntity, ActionEntityFactory>("LicenseRequest", true, false, ref _actions); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'DocumentEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(DocumentEntity))]
		public virtual EntityCollection<DocumentEntity> Documents { get { return GetOrCreateEntityCollection<DocumentEntity, DocumentEntityFactory>("LicenseRequest", true, false, ref _documents); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'LicenseEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(LicenseEntity))]
		public virtual EntityCollection<LicenseEntity> Licenses { get { return GetOrCreateEntityCollection<LicenseEntity, LicenseEntityFactory>("LicenseRequest", true, false, ref _licenses); } }

		/// <summary>Gets / sets related entity of type 'ClientEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual ClientEntity Client
		{
			get { return _client; }
			set { SetSingleRelatedEntityNavigator(value, "Client"); }
		}

		/// <summary>Gets / sets related entity of type 'LicenseTypeEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual LicenseTypeEntity LicenseType
		{
			get { return _licenseType; }
			set { SetSingleRelatedEntityNavigator(value, "LicenseType"); }
		}

		/// <summary>Gets / sets related entity of type 'UserEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual UserEntity User
		{
			get { return _user; }
			set { SetSingleRelatedEntityNavigator(value, "User"); }
		}
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace Licenses_Generator_DBFirst
{
	public enum LicenseRequestFieldIndex
	{
		///<summary>ClientId. </summary>
		ClientId,
		///<summary>Id. </summary>
		Id,
		///<summary>IssuedTime. </summary>
		IssuedTime,
		///<summary>Status. </summary>
		Status,
		///<summary>TypeId. </summary>
		TypeId,
		///<summary>UserId. </summary>
		UserId,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Licenses_Generator_DBFirst.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: LicenseRequest. </summary>
	public partial class LicenseRequestRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between LicenseRequestEntity and ActionEntity over the 1:n relation they have, using the relation between the fields: LicenseRequest.Id - Action.RequestId</summary>
		public virtual IEntityRelation ActionEntityUsingRequestId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Actions", true, new[] { LicenseRequestFields.Id, ActionFields.RequestId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between LicenseRequestEntity and DocumentEntity over the 1:n relation they have, using the relation between the fields: LicenseRequest.Id - Document.RequestId</summary>
		public virtual IEntityRelation DocumentEntityUsingRequestId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Documents", true, new[] { LicenseRequestFields.Id, DocumentFields.RequestId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between LicenseRequestEntity and LicenseEntity over the 1:n relation they have, using the relation between the fields: LicenseRequest.Id - License.RequestId</summary>
		public virtual IEntityRelation LicenseEntityUsingRequestId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Licenses", true, new[] { LicenseRequestFields.Id, LicenseFields.RequestId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between LicenseRequestEntity and ClientEntity over the m:1 relation they have, using the relation between the fields: LicenseRequest.ClientId - Client.Id</summary>
		public virtual IEntityRelation ClientEntityUsingClientId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Client", false, new[] { ClientFields.Id, LicenseRequestFields.ClientId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between LicenseRequestEntity and LicenseTypeEntity over the m:1 relation they have, using the relation between the fields: LicenseRequest.TypeId - LicenseType.Id</summary>
		public virtual IEntityRelation LicenseTypeEntityUsingTypeId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "LicenseType", false, new[] { LicenseTypeFields.Id, LicenseRequestFields.TypeId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between LicenseRequestEntity and UserEntity over the m:1 relation they have, using the relation between the fields: LicenseRequest.UserId - User.Id</summary>
		public virtual IEntityRelation UserEntityUsingUserId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "User", false, new[] { UserFields.Id, LicenseRequestFields.UserId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticLicenseRequestRelations
	{
		internal static readonly IEntityRelation ActionEntityUsingRequestIdStatic = new LicenseRequestRelations().ActionEntityUsingRequestId;
		internal static readonly IEntityRelation DocumentEntityUsingRequestIdStatic = new LicenseRequestRelations().DocumentEntityUsingRequestId;
		internal static readonly IEntityRelation LicenseEntityUsingRequestIdStatic = new LicenseRequestRelations().LicenseEntityUsingRequestId;
		internal static readonly IEntityRelation ClientEntityUsingClientIdStatic = new LicenseRequestRelations().ClientEntityUsingClientId;
		internal static readonly IEntityRelation LicenseTypeEntityUsingTypeIdStatic = new LicenseRequestRelations().LicenseTypeEntityUsingTypeId;
		internal static readonly IEntityRelation UserEntityUsingUserIdStatic = new LicenseRequestRelations().UserEntityUsingUserId;

		/// <summary>CTor</summary>
		static StaticLicenseRequestRelations() { }
	}
}
