//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.7.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Licenses_Generator_DBFirst.HelperClasses;
using Licenses_Generator_DBFirst.FactoryClasses;
using Licenses_Generator_DBFirst.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Licenses_Generator_DBFirst.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'License'.<br/><br/></summary>
	[Serializable]
	public partial class LicenseEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private ClientEntity _client;
		private LicenseRequestEntity _licenseRequest;
		private LicenseTypeEntity _licenseType;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static LicenseEntityStaticMetaData _staticMetaData = new LicenseEntityStaticMetaData();
		private static LicenseRelations _relationsFactory = new LicenseRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Client</summary>
			public static readonly string Client = "Client";
			/// <summary>Member name LicenseRequest</summary>
			public static readonly string LicenseRequest = "LicenseRequest";
			/// <summary>Member name LicenseType</summary>
			public static readonly string LicenseType = "LicenseType";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class LicenseEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public LicenseEntityStaticMetaData()
			{
				SetEntityCoreInfo("LicenseEntity", InheritanceHierarchyType.None, false, (int)Licenses_Generator_DBFirst.EntityType.LicenseEntity, typeof(LicenseEntity), typeof(LicenseEntityFactory), false);
				AddNavigatorMetaData<LicenseEntity, ClientEntity>("Client", "Licenses", (a, b) => a._client = b, a => a._client, (a, b) => a.Client = b, Licenses_Generator_DBFirst.RelationClasses.StaticLicenseRelations.ClientEntityUsingClientIdStatic, ()=>new LicenseRelations().ClientEntityUsingClientId, null, new int[] { (int)LicenseFieldIndex.ClientId }, null, true, (int)Licenses_Generator_DBFirst.EntityType.ClientEntity);
				AddNavigatorMetaData<LicenseEntity, LicenseRequestEntity>("LicenseRequest", "Licenses", (a, b) => a._licenseRequest = b, a => a._licenseRequest, (a, b) => a.LicenseRequest = b, Licenses_Generator_DBFirst.RelationClasses.StaticLicenseRelations.LicenseRequestEntityUsingRequestIdStatic, ()=>new LicenseRelations().LicenseRequestEntityUsingRequestId, null, new int[] { (int)LicenseFieldIndex.RequestId }, null, true, (int)Licenses_Generator_DBFirst.EntityType.LicenseRequestEntity);
				AddNavigatorMetaData<LicenseEntity, LicenseTypeEntity>("LicenseType", "Licenses", (a, b) => a._licenseType = b, a => a._licenseType, (a, b) => a.LicenseType = b, Licenses_Generator_DBFirst.RelationClasses.StaticLicenseRelations.LicenseTypeEntityUsingTypeIdStatic, ()=>new LicenseRelations().LicenseTypeEntityUsingTypeId, null, new int[] { (int)LicenseFieldIndex.TypeId }, null, true, (int)Licenses_Generator_DBFirst.EntityType.LicenseTypeEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static LicenseEntity()
		{
		}

		/// <summary> CTor</summary>
		public LicenseEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public LicenseEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this LicenseEntity</param>
		public LicenseEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for License which data should be fetched into this License object</param>
		public LicenseEntity(System.Int32 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for License which data should be fetched into this License object</param>
		/// <param name="validator">The custom validator object for this LicenseEntity</param>
		public LicenseEntity(System.Int32 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected LicenseEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Client' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoClient() { return CreateRelationInfoForNavigator("Client"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'LicenseRequest' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLicenseRequest() { return CreateRelationInfoForNavigator("LicenseRequest"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'LicenseType' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLicenseType() { return CreateRelationInfoForNavigator("LicenseType"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this LicenseEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static LicenseRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Client' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathClient { get { return _staticMetaData.GetPrefetchPathElement("Client", CommonEntityBase.CreateEntityCollection<ClientEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'LicenseRequest' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLicenseRequest { get { return _staticMetaData.GetPrefetchPathElement("LicenseRequest", CommonEntityBase.CreateEntityCollection<LicenseRequestEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'LicenseType' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLicenseType { get { return _staticMetaData.GetPrefetchPathElement("LicenseType", CommonEntityBase.CreateEntityCollection<LicenseTypeEntity>()); } }

		/// <summary>The ClientId property of the Entity License<br/><br/></summary>
		/// <remarks>Mapped on  table field: "License"."ClientId".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 ClientId
		{
			get { return (System.Int32)GetValue((int)LicenseFieldIndex.ClientId, true); }
			set	{ SetValue((int)LicenseFieldIndex.ClientId, value); }
		}

		/// <summary>The Id property of the Entity License<br/><br/></summary>
		/// <remarks>Mapped on  table field: "License"."id".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 Id
		{
			get { return (System.Int32)GetValue((int)LicenseFieldIndex.Id, true); }
			set { SetValue((int)LicenseFieldIndex.Id, value); }		}

		/// <summary>The IssuedTime property of the Entity License<br/><br/></summary>
		/// <remarks>Mapped on  table field: "License"."issued-time".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime IssuedTime
		{
			get { return (System.DateTime)GetValue((int)LicenseFieldIndex.IssuedTime, true); }
			set	{ SetValue((int)LicenseFieldIndex.IssuedTime, value); }
		}

		/// <summary>The RequestId property of the Entity License<br/><br/></summary>
		/// <remarks>Mapped on  table field: "License"."RequestId".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 RequestId
		{
			get { return (System.Int32)GetValue((int)LicenseFieldIndex.RequestId, true); }
			set	{ SetValue((int)LicenseFieldIndex.RequestId, value); }
		}

		/// <summary>The TypeId property of the Entity License<br/><br/></summary>
		/// <remarks>Mapped on  table field: "License"."TypeId".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 TypeId
		{
			get { return (System.Int32)GetValue((int)LicenseFieldIndex.TypeId, true); }
			set	{ SetValue((int)LicenseFieldIndex.TypeId, value); }
		}

		/// <summary>Gets / sets related entity of type 'ClientEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual ClientEntity Client
		{
			get { return _client; }
			set { SetSingleRelatedEntityNavigator(value, "Client"); }
		}

		/// <summary>Gets / sets related entity of type 'LicenseRequestEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual LicenseRequestEntity LicenseRequest
		{
			get { return _licenseRequest; }
			set { SetSingleRelatedEntityNavigator(value, "LicenseRequest"); }
		}

		/// <summary>Gets / sets related entity of type 'LicenseTypeEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual LicenseTypeEntity LicenseType
		{
			get { return _licenseType; }
			set { SetSingleRelatedEntityNavigator(value, "LicenseType"); }
		}
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace Licenses_Generator_DBFirst
{
	public enum LicenseFieldIndex
	{
		///<summary>ClientId. </summary>
		ClientId,
		///<summary>Id. </summary>
		Id,
		///<summary>IssuedTime. </summary>
		IssuedTime,
		///<summary>RequestId. </summary>
		RequestId,
		///<summary>TypeId. </summary>
		TypeId,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Licenses_Generator_DBFirst.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: License. </summary>
	public partial class LicenseRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between LicenseEntity and ClientEntity over the m:1 relation they have, using the relation between the fields: License.ClientId - Client.Id</summary>
		public virtual IEntityRelation ClientEntityUsingClientId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Client", false, new[] { ClientFields.Id, LicenseFields.ClientId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between LicenseEntity and LicenseRequestEntity over the m:1 relation they have, using the relation between the fields: License.RequestId - LicenseRequest.Id</summary>
		public virtual IEntityRelation LicenseRequestEntityUsingRequestId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "LicenseRequest", false, new[] { LicenseRequestFields.Id, LicenseFields.RequestId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between LicenseEntity and LicenseTypeEntity over the m:1 relation they have, using the relation between the fields: License.TypeId - LicenseType.Id</summary>
		public virtual IEntityRelation LicenseTypeEntityUsingTypeId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "LicenseType", false, new[] { LicenseTypeFields.Id, LicenseFields.TypeId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticLicenseRelations
	{
		internal static readonly IEntityRelation ClientEntityUsingClientIdStatic = new LicenseRelations().ClientEntityUsingClientId;
		internal static readonly IEntityRelation LicenseRequestEntityUsingRequestIdStatic = new LicenseRelations().LicenseRequestEntityUsingRequestId;
		internal static readonly IEntityRelation LicenseTypeEntityUsingTypeIdStatic = new LicenseRelations().LicenseTypeEntityUsingTypeId;

		/// <summary>CTor</summary>
		static StaticLicenseRelations() { }
	}
}
