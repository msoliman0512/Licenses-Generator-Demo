//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.7.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Licenses_Generator_DBFirst.HelperClasses;
using Licenses_Generator_DBFirst.FactoryClasses;
using Licenses_Generator_DBFirst.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Licenses_Generator_DBFirst.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'LicenseType'.<br/><br/></summary>
	[Serializable]
	public partial class LicenseTypeEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private EntityCollection<LicenseEntity> _licenses;
		private EntityCollection<LicenseRequestEntity> _licenseRequests;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static LicenseTypeEntityStaticMetaData _staticMetaData = new LicenseTypeEntityStaticMetaData();
		private static LicenseTypeRelations _relationsFactory = new LicenseTypeRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Licenses</summary>
			public static readonly string Licenses = "Licenses";
			/// <summary>Member name LicenseRequests</summary>
			public static readonly string LicenseRequests = "LicenseRequests";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class LicenseTypeEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public LicenseTypeEntityStaticMetaData()
			{
				SetEntityCoreInfo("LicenseTypeEntity", InheritanceHierarchyType.None, false, (int)Licenses_Generator_DBFirst.EntityType.LicenseTypeEntity, typeof(LicenseTypeEntity), typeof(LicenseTypeEntityFactory), false);
				AddNavigatorMetaData<LicenseTypeEntity, EntityCollection<LicenseEntity>>("Licenses", a => a._licenses, (a, b) => a._licenses = b, a => a.Licenses, () => new LicenseTypeRelations().LicenseEntityUsingTypeId, typeof(LicenseEntity), (int)Licenses_Generator_DBFirst.EntityType.LicenseEntity);
				AddNavigatorMetaData<LicenseTypeEntity, EntityCollection<LicenseRequestEntity>>("LicenseRequests", a => a._licenseRequests, (a, b) => a._licenseRequests = b, a => a.LicenseRequests, () => new LicenseTypeRelations().LicenseRequestEntityUsingTypeId, typeof(LicenseRequestEntity), (int)Licenses_Generator_DBFirst.EntityType.LicenseRequestEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static LicenseTypeEntity()
		{
		}

		/// <summary> CTor</summary>
		public LicenseTypeEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public LicenseTypeEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this LicenseTypeEntity</param>
		public LicenseTypeEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for LicenseType which data should be fetched into this LicenseType object</param>
		public LicenseTypeEntity(System.Int32 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for LicenseType which data should be fetched into this LicenseType object</param>
		/// <param name="validator">The custom validator object for this LicenseTypeEntity</param>
		public LicenseTypeEntity(System.Int32 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected LicenseTypeEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'License' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLicenses() { return CreateRelationInfoForNavigator("Licenses"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'LicenseRequest' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLicenseRequests() { return CreateRelationInfoForNavigator("LicenseRequests"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this LicenseTypeEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static LicenseTypeRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'License' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLicenses { get { return _staticMetaData.GetPrefetchPathElement("Licenses", CommonEntityBase.CreateEntityCollection<LicenseEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'LicenseRequest' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLicenseRequests { get { return _staticMetaData.GetPrefetchPathElement("LicenseRequests", CommonEntityBase.CreateEntityCollection<LicenseRequestEntity>()); } }

		/// <summary>The Id property of the Entity LicenseType<br/><br/></summary>
		/// <remarks>Mapped on  table field: "License_Type"."id".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 Id
		{
			get { return (System.Int32)GetValue((int)LicenseTypeFieldIndex.Id, true); }
			set { SetValue((int)LicenseTypeFieldIndex.Id, value); }		}

		/// <summary>The TimeTillExpire property of the Entity LicenseType<br/><br/></summary>
		/// <remarks>Mapped on  table field: "License_Type"."time-till-expire".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 255.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String TimeTillExpire
		{
			get { return (System.String)GetValue((int)LicenseTypeFieldIndex.TimeTillExpire, true); }
			set	{ SetValue((int)LicenseTypeFieldIndex.TimeTillExpire, value); }
		}

		/// <summary>The Type property of the Entity LicenseType<br/><br/></summary>
		/// <remarks>Mapped on  table field: "License_Type"."type".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 255.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Type
		{
			get { return (System.String)GetValue((int)LicenseTypeFieldIndex.Type, true); }
			set	{ SetValue((int)LicenseTypeFieldIndex.Type, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'LicenseEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(LicenseEntity))]
		public virtual EntityCollection<LicenseEntity> Licenses { get { return GetOrCreateEntityCollection<LicenseEntity, LicenseEntityFactory>("LicenseType", true, false, ref _licenses); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'LicenseRequestEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(LicenseRequestEntity))]
		public virtual EntityCollection<LicenseRequestEntity> LicenseRequests { get { return GetOrCreateEntityCollection<LicenseRequestEntity, LicenseRequestEntityFactory>("LicenseType", true, false, ref _licenseRequests); } }
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace Licenses_Generator_DBFirst
{
	public enum LicenseTypeFieldIndex
	{
		///<summary>Id. </summary>
		Id,
		///<summary>TimeTillExpire. </summary>
		TimeTillExpire,
		///<summary>Type. </summary>
		Type,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Licenses_Generator_DBFirst.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: LicenseType. </summary>
	public partial class LicenseTypeRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between LicenseTypeEntity and LicenseEntity over the 1:n relation they have, using the relation between the fields: LicenseType.Id - License.TypeId</summary>
		public virtual IEntityRelation LicenseEntityUsingTypeId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Licenses", true, new[] { LicenseTypeFields.Id, LicenseFields.TypeId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between LicenseTypeEntity and LicenseRequestEntity over the 1:n relation they have, using the relation between the fields: LicenseType.Id - LicenseRequest.TypeId</summary>
		public virtual IEntityRelation LicenseRequestEntityUsingTypeId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "LicenseRequests", true, new[] { LicenseTypeFields.Id, LicenseRequestFields.TypeId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticLicenseTypeRelations
	{
		internal static readonly IEntityRelation LicenseEntityUsingTypeIdStatic = new LicenseTypeRelations().LicenseEntityUsingTypeId;
		internal static readonly IEntityRelation LicenseRequestEntityUsingTypeIdStatic = new LicenseTypeRelations().LicenseRequestEntityUsingTypeId;

		/// <summary>CTor</summary>
		static StaticLicenseTypeRelations() { }
	}
}
